// Name -> Rahul Roy
// Roll -> IIT2019194

// Compiler used --> G++
// command to compile -> g++ q1.cpp -lpthread
// command to run -> ./a.out
 
// Model name ----> Intel(R) Core(TM) i3-7020U CPU @ 2.30GHz
// Number of CPU's ---> 4
// Number of cores per socket ---> 24
// Architecture  ------>  x86_64
// CPU op-mode(s) ------>  32-bit, 64-bit


// Algorith used --->  I firstly generated a random array containing values between [1-20]. 
// Then I divide the summation work equally between all the threads, since N is a power of 2. 
// Each thread calculates the sum of (N/MAX_THREAD)th part of the array and then the finalsum
// is generated by combining each thread's result stored in sum[i].

#include <bits/stdc++.h>
#include <pthread.h>
  
using namespace std;

#define N 16 // number of elements of the array  
#define MAX_THREAD 4 // total number of threads

vector<int> v(N);
int part= 0;
vector<int> sum(MAX_THREAD, 0);
  
void generateRandomArray(){
    for(int i=0;i<N;i++){
        int num = (rand() %(20 - 1 + 1)) + 1;
        v[i] = num;
    }
}
  
void* sumOfArray(void* arg)
{
  
    // Each thread calculates the sum of (N/MAX_THREAD)th part of the array
    int thread_part = part++;
  
    for (int i = thread_part * (N / MAX_THREAD); i < (thread_part + 1) * (N / MAX_THREAD); i++)
        sum[thread_part] += v[i];
    
    return NULL;
}
  
int main()
{
  
    pthread_t threads[MAX_THREAD];

    srand(time(0));
    generateRandomArray();
    int myCalculatedSum = 0;
    cout<<"The array generated is :\n";
    for(int i=0;i<N;i++){
        cout<<v[i]<<" ";
        myCalculatedSum+=v[i];
    }
    cout<<"\n";
  
    // Creating 4 threads
    for (int i = 0; i < MAX_THREAD; i++)
        pthread_create(&threads[i], NULL, sumOfArray, (void*)NULL);
  
    // joining 4 threads i.e. waiting for all 4 threads to complete
    for (int i = 0; i < MAX_THREAD; i++)
        pthread_join(threads[i], NULL);
  
    // Adding and storing the final sum from all threads into total_sum
    int total_sum = 0;
    for (int i = 0; i < MAX_THREAD; i++)
        total_sum += sum[i];
  
    cout << "The calculated sum through serialization is = " << myCalculatedSum << endl;
    cout << "The calculated sum through parallelization is = "<<total_sum<<endl;

    return 0;
}